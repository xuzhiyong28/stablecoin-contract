#include "stdlib.fc";

const const::min_tons_for_storage = 10000000; ;; 合约保留的最小ton数量

(int, slice, slice) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_uint(32),  ;; conter_value
        ds~load_msg_addr(), ;; the most recent sender
        ds~load_msg_addr() ;; owner address
    );
}

() save_data(int conter_value, slice recent_sender, slice owner_address) impure inline {
    set_data(
        begin_cell()
        .store_uint(conter_value, 32)
        .store_slice(recent_sender)
        .store_slice(owner_address)
        .end_cell()
    );
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr(); ;; 发送者地址
    int op = in_msg_body~load_uint(32);

    var (counter_value, recent_sender, owner_address) = load_data();

    if(op == 1) {
        int increment_by = in_msg_body~load_uint(32);
        ;;slice ds = get_data().begin_parse();
        ;;int counter_value = ds~load_uint(32);
        ;;set_data(begin_cell().store_uint(counter_value + increment_by, 32).store_slice(sender_address).end_cell());
        save_data(counter_value + increment_by, sender_address, owner_address);
        return();
    }

    if(op == 2) {
        ;; 存款 无需做处理
        return();
    }

    if(op == 3) {
        ;; 取款
        throw_unless(103, equal_slice_bits(sender_address, owner_address));
        int withdraw_amount = in_msg_body~load_coins();
        var [balance, _] = get_balance();
        throw_unless(104, balance >= withdraw_amount);
        int return_value = min(withdraw_amount, balance - const::min_tons_for_storage);
        ;; 发送内部消息
        int msg_mode = 1; ;; 信息模式 普通内部函数 + 单独支付转账费用
        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_address)
            .store_coins(return_value)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .end_cell();
        send_raw_message(msg, msg_mode);
        return ();
    }

    throw(777);

}

;;slice get_the_latest_sender() method_id {
;;    slice ds = get_data().begin_parse();
;;    return ds~load_msg_addr();
;;}

(int, slice, slice) get_contract_storage_data() method_id {
    var (counter_value, recent_sender, owner_address) = load_data();
    return (
        counter_value,
        recent_sender,
        owner_address
    );
}

int balance() method_id {
    var [balance, _] = get_balance();
    return balance;
}
